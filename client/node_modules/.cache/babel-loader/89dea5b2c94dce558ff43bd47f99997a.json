{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBAJ0huZDTYTEaDvKEhlWrGA7m3t81Anxw\",\n  authDomain: \"use-firebase-43193.firebaseapp.com\",\n  databaseURL: \"https://use-firebase-43193.firebaseio.com\",\n  projectId: \"use-firebase-43193\",\n  storageBucket: \"use-firebase-43193.appspot.com\",\n  messagingSenderId: \"756175991561\",\n  appId: \"1:756175991561:web:e200230c7859789426d9d8\",\n  measurementId: \"G-XLTW72L4LQ\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config); // export const addCollectionAndItems = (collection)\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  'prompt': 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/codingvps/Desktop/ReactJS/complete-react/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,oCAFC;AAGbC,EAAAA,WAAW,EAAE,2CAHA;AAIbC,EAAAA,SAAS,EAAE,oBAJE;AAKbC,EAAAA,aAAa,EAAE,gCALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GACpC,OAAOC,QAAP,EAAiBC,cAAjB,KACF;AACE,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AAGA,QAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB;AACA,QAAMC,kBAAkB,GAAG,MAAMJ,aAAa,CAACG,GAAd,EAAjC;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AACVL,IAAAA,UAAU,EAAGG,kBAAkB,CAACG,IAAnB,CAAwBC,GAAxB,CAA4BV,GAAG,IAAIA,GAAG,CAACW,IAAJ,EAAnC;AADH,GAAZ;;AAIA,MAAG,CAACP,QAAQ,CAACQ,MAAb,EAAoB;AAClB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAwBlB,QAA9B;AACA,UAAMmB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMlB,OAAO,CAACmB,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGlB;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOqB,KAAP,EAAa;AACbX,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCU,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOrB,OAAP;AACD,CAlCM;AAoCPb,QAAQ,CAACmC,aAAT,CAAuBlC,MAAvB,E,CAEA;;AAEA,OAAO,MAAMmC,IAAI,GAAGpC,QAAQ,CAACoC,IAAT,EAAb;AACP,OAAO,MAAMtB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMuB,QAAQ,GAAG,IAAIrC,QAAQ,CAACoC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAC3B,YAAW;AADgB,CAA7B;AAGA,OAAO,MAAMC,gBAAgB,GAAG,MAAMJ,IAAI,CAACK,eAAL,CAAqBJ,QAArB,CAA/B;AAEP,eAAerC,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: \"AIzaSyBAJ0huZDTYTEaDvKEhlWrGA7m3t81Anxw\",\n  authDomain: \"use-firebase-43193.firebaseapp.com\",\n  databaseURL: \"https://use-firebase-43193.firebaseio.com\",\n  projectId: \"use-firebase-43193\",\n  storageBucket: \"use-firebase-43193.appspot.com\",\n  messagingSenderId: \"756175991561\",\n  appId: \"1:756175991561:web:e200230c7859789426d9d8\",\n  measurementId: \"G-XLTW72L4LQ\"\n};\n\nexport const createUserProfileDocument = \n  async (userAuth, additionalData) => \n{\n  if(!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const collectionRef = firestore.collection('users');\n\n\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n\n  console.log({\n    collection:  collectionSnapshot.docs.map(doc => doc.data())\n  });\n  \n  if(!snapShot.exists){\n    const {displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error){\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}\n\nfirebase.initializeApp(config);\n\n// export const addCollectionAndItems = (collection)\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  'prompt' : 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}