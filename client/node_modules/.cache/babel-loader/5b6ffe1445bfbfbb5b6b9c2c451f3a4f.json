{"ast":null,"code":"var _jsxFileName = \"/home/codingvps/Desktop/ReactJS/complete-react/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { auth, signInWithGoogle } from '../../firebase/firebase.utils';\nimport { googleSignInStart } from '../../redux/user/user.actions';\nimport { SignInContainer, SingInTitle, ButtonsBarContainer } from './sign-in.styles';\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const {\n        email,\n        password\n      } = this.state;\n\n      try {\n        await auth.signInWithEmailAndPassword(email, password);\n        this.setState({\n          email: '',\n          password: ''\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.handleChange = event => {\n      const {\n        value,\n        name\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  render() {\n    return React.createElement(SignInContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(SingInTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      label: \"Email\",\n      name: \"email\",\n      type: \"email\",\n      value: this.state.email,\n      handleChange: this.handleChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      label: \"Password\",\n      name: \"password\",\n      type: \"password\",\n      value: this.state.password,\n      handleChange: this.handleChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(ButtonsBarContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Sign in\"), React.createElement(CustomButton, {\n      isGoogleSignIn: true,\n      onClick: signInWithGoogle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Sign in with Google\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  signInWithGoogle: () => dispatch(googleSignInStart())\n});\n\nexport default SignIn;","map":{"version":3,"sources":["/home/codingvps/Desktop/ReactJS/complete-react/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","FormInput","CustomButton","auth","signInWithGoogle","googleSignInStart","SignInContainer","SingInTitle","ButtonsBarContainer","SignIn","Component","constructor","props","handleSubmit","event","preventDefault","email","password","state","signInWithEmailAndPassword","setState","error","console","log","handleChange","value","name","target","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\n\nimport {auth, signInWithGoogle} from '../../firebase/firebase.utils';\nimport {googleSignInStart} from '../../redux/user/user.actions';\n\nimport {\n  SignInContainer,\n  SingInTitle,\n  ButtonsBarContainer\n} from './sign-in.styles';\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      email: '',\n      password: ''\n    }\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    const { email, password } = this.state;\n\n    try {\n      await auth.signInWithEmailAndPassword(email, password);\n      \n      this.setState({\n        email: '',\n        password: ''\n      });\n\n    } catch (error){\n      console.log(error);\n    }\n\n  }\n\n  handleChange = event => {\n    const {value, name} = event.target;\n\n    this.setState({\n      [name] : value\n    });\n  }\n\n  render() { \n    return (\n      <SignInContainer>\n          <SingInTitle>I already have an account</SingInTitle>\n          <span>Sign in with your email and password</span>\n\n          <form onSubmit={this.handleSubmit}>\n            <FormInput \n              label='Email'\n              name='email' \n              type='email' \n              value={this.state.email}\n              handleChange={this.handleChange}\n              required \n            />\n            <FormInput \n              label='Password'\n              name='password' \n              type='password' \n              value={this.state.password}\n              handleChange={this.handleChange}\n              required \n            />\n            <ButtonsBarContainer>\n              <CustomButton type='submit'>\n                Sign in\n              </CustomButton>\n              <CustomButton isGoogleSignIn onClick={signInWithGoogle}>\n                Sign in with Google\n              </CustomButton>\n            </ButtonsBarContainer>\n          </form>\n      </SignInContainer>  \n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  signInWithGoogle: () => dispatch(googleSignInStart())\n});\n \nexport default SignIn;"]},"metadata":{},"sourceType":"module"}